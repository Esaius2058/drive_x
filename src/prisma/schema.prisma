// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String
  expiresAt DateTime
}

//the account holder using the service.
model User {
  id           Int           @id @default(autoincrement())
  name         String
  email        String        @unique
  passwordHash String        @map("password_hash")
  storageLimit Int           @map("storage_limit")
  usedStorage  Int           @map("used_storage")
  createdAt    DateTime      @default(now()) @map("created_at")
  File         File[]
  Folder       Folder[]
  activityLog  ActivityLog[]
}

//an uploaded file.
model File {
  id          Int           @id @default(autoincrement())
  user        User          @relation(fields: [userId], references: [id])
  userId      Int           @map("user_id")
  folder      Folder?       @relation(fields: [folderId], references: [id], onDelete: SetNull)
  folderId    Int?          @map("folder_id")
  name        String
  size        Int
  fileType    String        @map("file_type")
  path        String
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")
  isShared    Boolean       @default(false) @map("is_shared")
  activityLog ActivityLog[]
}

//a directory that contains files or other folders.
model Folder {
  id             Int      @id @default(autoincrement())
  user           User     @relation(fields: [userId], references: [id])
  userId         Int      @map("user_id")
  parentFolder   Folder?  @relation("FolderHierarchy", fields: [parentFolderId], references: [id], onDelete: SetNull)
  subFolders     Folder[] @relation("FolderHierarchy")
  parentFolderId Int?     @map("parent_folder_id")
  name           String
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")
  file           File[]
}

//stores actions like file uploads, deletions, and renames.
model ActivityLog {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id])
  userId     Int      @map("user_id")
  file       File     @relation(fields: [fileId], references: [id])
  fileId     Int      @map("file_id")
  actionType String   @map("action_type")
  timeStamp  DateTime @map("time_stamp")
}
